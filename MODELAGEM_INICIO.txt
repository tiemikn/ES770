DIAGRAMA DE CASOS DE USO (UCD - Use Case Description) 

PAG. 14

The actors that interact with the system are:
   -> 6 sensores de luz infravermelho 
   -> 2 motores 
   {-> sistema de controle (SPLINE + PID) 
   -> conversor A/D }  

The system function points are:
   -> 6 sensores - detectam a pista
   -> 2 motores - movem o carro sobre a pista  
   {-> conversor A/D - converte o sinal 
   -> sistema de controle - Controla o acionamento dos motores }
    

The actors interact with the system in the following ways:
   -> Os sensores emitem e captam luz infravermelho gerando 
      um sinal analógico de intensidade. 
   -> Os motores recebem o sinal de controle do sistema e movem
      o carrinho
   {-> o conversor A/D  recebe o sinal analógico proveniente dos 
       sensores e os converte em sinal digital 8 bits que será 
       enviado ao PIC 
   -> O sistema de controle recebe os sinais processa-os e gera 
   uma saída (sinal de controle) enviado aos motores para seu 
   acionamento } 


PAG. 27 

SUBCATEGORIAS 

--> ACIONAMENTO DOS MOTORES
	-> MOTOR ESQUERDO 
	-> MOTOR DIREITO 

--> LEITURA DOS SENSORES 
	-> SENSORES DE 1 A 6 


PAG. 34 

Adding Requirement Elements

1.1	O sistema deve ser capaz de converter as leituras analógicas dos sensores para digitais
1.2	O sistema deve ser capaz de realizar a calibração da leitura dos sensores IR
1.3	O sistema deve ser capaz de encontrar o centro da linha por meio de slpine (mínimo quadrático)

2.1	O sistema deve ser capaz de ler as velocidades dos motores
2.2	O sistema deve ser capaz de controlar os motores por PWM a partir de dados de calibração

3.1	O sistema deve possuir um controlador PID digital para ajustar o PWM dos motores 
	e um controlador de direção PI capaz de gerenciar a trajetória


Creating a Block Diagram

main
-

sensor
- void 		sensor_initSensor() 	// Liga IR
- unsigned int 	sensor_getSensorData(char cSensorID)	// Lê IR

ADC
- // TODO: VERIFICAR A SAÍDA DA LEITURA ANALOGICA;
- adc_getValue()
- adc_initAdc()
- adc_isAdcDone()
- adc_StartConvertion()

spline
- int 	spline_getCenter(uiSensor1, uiSensor2, uiSensor3, uiSensor4, uiSensor5, uiSensor6) // Encontra o centro da linha

speed
- unsigned int 	speed_getSpeed(unsigned char ucMotor) //aquisita a velocidade de cada roda [RPM]

PWM
- void 	pwm_initPwm(unsigned char ucDevice)
- void 	pwm_setDutyCycle(const unsigned int uiDutyCycle, unsigned char ucDevice) // MOTOR 1 OU 2 ucDevice 


control
- PID 		control_initPid(void)	// Cria um novo PID
- void 		control_setPidParameters(PID *pid, double dKP, double dKI, double dKD)	// Define valores para as constantes do PID
- double 	control_PidUpdate (PID *pid, double dRef, double dOutputValue)	// Pega a saída e atualiza o estado do PID








